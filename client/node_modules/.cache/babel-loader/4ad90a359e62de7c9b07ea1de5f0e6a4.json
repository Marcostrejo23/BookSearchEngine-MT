{"ast":null,"code":"var _jsxFileName = \"/Users/marcostrejo/Desktop/code/BookSearchEngine-MT/client/src/pages/SavedBooks.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Jumbotron, Container, CardColumns, Card, Button } from 'react-bootstrap';\nimport { useQuery, useMutation } from '@apollo/client';\nimport { GET_ME } from '../utils/queries';\nimport { REMOVE_BOOK } from '../utils/mutations';\nimport Auth from '../utils/auth';\nimport { removeBookId } from '../utils/localStorage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst SavedBooks = () => {\n  _s();\n\n  const {\n    loading,\n    data\n  } = useQuery(GET_ME);\n  const userData = (data === null || data === void 0 ? void 0 : data.me) || {};\n  const [deleteBook, {\n    error\n  }] = useMutation(REMOVE_BOOK);\n\n  const handleDeleteBook = async bookId => {\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      const {\n        data\n      } = await deleteBook({\n        variables: {\n          bookId\n        }\n      });\n\n      if (error) {\n        throw new Error('something went wrong!');\n      } // const updatedUser = await response.json();\n      // setUserData(updatedUser);\n      // upon success, remove book's id from localStorage\n\n\n      removeBookId(bookId);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"LOADING...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Jumbotron, {\n      fluid: true,\n      className: \"text-light bg-dark\",\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Viewing saved books!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: userData.savedBooks.length ? `Viewing ${userData.savedBooks.length} saved ${userData.savedBooks.length === 1 ? 'book' : 'books'}:` : 'You have no saved books!'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CardColumns, {\n        children: userData.savedBooks.map(book => {\n          return /*#__PURE__*/_jsxDEV(Card, {\n            border: \"dark\",\n            children: [book.image ? /*#__PURE__*/_jsxDEV(Card.Img, {\n              src: book.image,\n              alt: `The cover for ${book.title}`,\n              variant: \"top\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 31\n            }, this) : null, /*#__PURE__*/_jsxDEV(Card.Body, {\n              children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n                children: book.title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 64,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"small\",\n                children: [\"Authors: \", book.authors]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 65,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n                children: book.description\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 66,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                className: \"btn-block btn-danger\",\n                onClick: () => handleDeleteBook(book.bookId),\n                children: \"Delete this Book!\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 67,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 17\n            }, this)]\n          }, book.bookId, true, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(SavedBooks, \"EtPa3pjwxJGHPB9MHEW6LEVQNqM=\", false, function () {\n  return [useQuery, useMutation];\n});\n\n_c = SavedBooks;\nexport default SavedBooks;\n\nvar _c;\n\n$RefreshReg$(_c, \"SavedBooks\");","map":{"version":3,"sources":["/Users/marcostrejo/Desktop/code/BookSearchEngine-MT/client/src/pages/SavedBooks.js"],"names":["React","Jumbotron","Container","CardColumns","Card","Button","useQuery","useMutation","GET_ME","REMOVE_BOOK","Auth","removeBookId","SavedBooks","loading","data","userData","me","deleteBook","error","handleDeleteBook","bookId","token","loggedIn","getToken","variables","Error","err","console","savedBooks","length","map","book","image","title","authors","description"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Jumbotron, Container, CardColumns, Card, Button } from 'react-bootstrap';\nimport { useQuery, useMutation } from '@apollo/client'\nimport { GET_ME } from '../utils/queries'\nimport { REMOVE_BOOK } from '../utils/mutations';\nimport Auth from '../utils/auth';\nimport { removeBookId } from '../utils/localStorage';\n\n\nconst SavedBooks = () => {\n\n  const { loading, data } = useQuery(GET_ME);\n  const userData = data?.me || {};\n\n  const [ deleteBook, { error } ] = useMutation(REMOVE_BOOK);\n  const handleDeleteBook = async (bookId) => {\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      const { data } = await deleteBook({\n        variables: {bookId}\n      });\n\n      if (error) {\n        throw new Error('something went wrong!');\n      }\n\n      // const updatedUser = await response.json();\n      // setUserData(updatedUser);\n      // upon success, remove book's id from localStorage\n      removeBookId(bookId);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  if ( loading ) {\n    return <h2>LOADING...</h2>;\n  }\n\n  return (\n    <>\n      <Jumbotron fluid className='text-light bg-dark'>\n        <Container>\n          <h1>Viewing saved books!</h1>\n        </Container>\n      </Jumbotron>\n      <Container>\n        <h2>\n          {userData.savedBooks.length\n            ? `Viewing ${userData.savedBooks.length} saved ${userData.savedBooks.length === 1 ? 'book' : 'books'}:`\n            : 'You have no saved books!'}\n        </h2>\n        <CardColumns>\n          {userData.savedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border='dark'>\n                {book.image ? <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' /> : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className='small'>Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  <Button className='btn-block btn-danger' onClick={() => handleDeleteBook(book.bookId)}>\n                    Delete this Book!\n                  </Button>\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  )\n};\n\nexport default SavedBooks;\n"]},"metadata":{},"sourceType":"module"}